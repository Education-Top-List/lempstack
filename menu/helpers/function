#!/bin/bash

######################################################################
#           Auto Install & Optimize LEMP Stack on CentOS 7, 8        #
#                                                                    #
#                Author: Sanvv - HOSTVN Technical                    #
#                  Website: https://hostvn.vn                        #
#                                                                    #
#              Please don't remove copyright. Thank!                 #
# Please don't copy copy under any circumstance for business reason! #
######################################################################

# shellcheck disable=SC2154
# shellcheck disable=SC2207
# shellcheck disable=SC2034
# shellcheck disable=SC1091
source /var/hostvn/menu/validate/rule

cd_dir(){
    cd "$1" || exit
}

# Print space
printf_s(){
    if [ "$1" -le 0 ]
    then
        echo ""
    else
        printf '%0.s ' $(seq 1 "$1")
    fi
}

convert_to_mb(){
    local -i bytes=$1;
    if [[ $bytes -lt 1024 ]]; then
        echo "${bytes} B"
    elif [[ $bytes -lt 1048576 ]]; then
        echo "$(( (bytes + 1023)/1024 )) MB"
    else
        echo "$(( (bytes + 1048575)/1048576 )) GB"
    fi
}

check_port_exists(){
    check_port=$(netstat -vatn | grep "${1}")
    if [ -z  "${check_port}" ]; then
        return 0
    else
        return  1
    fi
}

gen_pass(){
    < /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c"${1:-16}";echo;
}

select_domain(){
    domain=""
    if [ "$(ls -At "${USER_DIR}")" ]; then
        echo "${LIST_DOMAIN}"
        selects=()
        cd_dir "${USER_DIR}"
        for entry in .*.conf; do
            domain=$( echo "$entry" | sed 's/^.//' | sed 's/.conf//')
            if [ "${domain}" != "${domain/.}" ]; then
                selects+=("${domain}")
            fi
        done
        PS3="${INPUT_SELECT}"
        select select in "${selects[@]}"
        do
            domain=$select
            break
        done

        if ! validate_domain "${domain}"; then
            ALERT=$(printf "${RED}${WRONG_DOMAIN}${NC}\n")
        fi
    else
        ALERT=$(printf "${RED}${EMPTY_DOMAIN}${NC}\n")
    fi
}

# Select Source
select_source(){
    SOURCE="Other"
    echo "${SELECT_SOURCE}"
    PS3="${INPUT_SELECT}"
    options=("WordPress" "Laravel" "CodeIgniter" "Xenforo" "Joomla" "Drupal" "OpenCart" "WHMCS" "PrestaShop" "Yii" "NextCloud" "Discuz" "Ecshop" "Other")
    select opt in "${options[@]}"
    do
        case $opt in
            "WordPress") SOURCE="wordpress"; break;;
            "Laravel") SOURCE="laravel"; break;;
            "CodeIgniter") SOURCE="codeigniter"; break;;
            "Xenforo") SOURCE="xenforo"; break;;
            "Joomla") SOURCE="joomla"; break;;
            "Drupal") SOURCE="drupal"; break;;
            "OpenCart") SOURCE="opencart"; break;;
            "WHMCS") SOURCE="whmcs"; break;;
            "PrestaShop") SOURCE="prestashop"; break;;
            "Yii") SOURCE="yii"; break;;
            "NextCloud") SOURCE="nextcloud"; break;;
            "Discuz") SOURCE="discuz"; break;;
            "Ecshop") SOURCE="ecshop"; break;;
            "Other") SOURCE="default"; break;;
            *) printf "${RED}${WRONG_SELECT}${NC}\n"; break;;
        esac
    done
}

set_rewrite(){
    if [ "${SOURCE}" == "wordpress" ]; then
        rewrite="include /etc/nginx/rewrite/wordpress.conf;"
        wp_secure="include /etc/nginx/wordpress/wordpress_secure.conf;"
    elif [ "${SOURCE}" == "laravel" ]; then
        rewrite="include /etc/nginx/rewrite/laravel.conf;"
    elif [ "${SOURCE}" == "codeigniter" ]; then
        rewrite="include /etc/nginx/rewrite/codeigniter.conf;"
    elif [ "${SOURCE}" == "xenforo" ]; then
        rewrite="include /etc/nginx/rewrite/xenforo.conf;"
    elif [ "${SOURCE}" == "joomla" ]; then
        rewrite="include /etc/nginx/rewrite/joomla.conf;"
    elif [ "${SOURCE}" == "drupal" ]; then
        rewrite="include /etc/nginx/rewrite/drupal.conf;"
    elif [ "${SOURCE}" == "opencart" ]; then
        rewrite="include /etc/nginx/rewrite/opencart.conf;"
    elif [ "${SOURCE}" == "whmcs" ]; then
        rewrite="include /etc/nginx/rewrite/whmcs.conf;"
    elif [ "${SOURCE}" == "prestashop" ]; then
        rewrite="include /etc/nginx/rewrite/prestashop.conf;"
    elif [ "${SOURCE}" == "yii" ]; then
        rewrite="include /etc/nginx/rewrite/yii.conf;"
    elif [ "${SOURCE}" == "nextcloud" ]; then
        rewrite="include /etc/nginx/rewrite/nextcloud.conf;"
    elif [ "${SOURCE}" == "discuz" ]; then
        rewrite="include /etc/nginx/rewrite/discuz.conf;"
    elif [ "${SOURCE}" == "ecshop" ]; then
        rewrite="include /etc/nginx/rewrite/ecshop.conf;"
    else
        rewrite="include /etc/nginx/rewrite/default.conf;"
    fi
}

fastcgi(){
    fastcgi_pass="fastcgi_pass unix:/var/run/php-fpm/${username}.sock;"

    if [[ "${php_mode}" == "2" ]]; then
        fastcgi_pass="fastcgi_pass unix:/opt/remi/${php2_version}/root/var/run/php-fpm/${username}.sock;"
    fi
}

restart_service(){
    systemctl restart nginx.service
    systemctl restart php-fpm.service
    if [ "${php2_release}" == "yes" ]; then
        systemctl restart "${php2_version}"-php-fpm
    fi
}

make_backup_dir(){
    if [[ ! -d "/home/backup/${DATE}/${1}" ]]; then
        mkdir -p /home/backup/"${DATE}"/"${1}"
    fi
}

list_backup(){
    date=""
    if [ "$(ls -At /home/backup)" ]; then
        echo "${LIST_BACKUP}"
        selects=()
        cd_dir /home/backup
        for date in * ; do
            selects+=("${date}")
        done
        PS3="${SELECT_OPTION}"
        select select in "${selects[@]}"
        do
            date=${select}
            break
        done
    else
        ALERT=$(printf "${RED}${BACKUP_EMPTY}${NC}\n")
    fi
}

empty_db(){
    tables=$(mysql "${db_name}" -e 'show tables' | awk '{ print $1}' | grep -v '^Tables')
    for t in ${tables}
    do
        mysql "${db_name}" -e "drop table ${t}"
    done
}

select_plugin_cache(){
    plugins_cache="other"
    echo "${SELECT_PLUGINS_CACHE}"
    PS3="${INPUT_SELECT}"
    options=("W3 Total Cache" "WP Fastest Cache" "WP Rocket" "WP Super Cache" "Cache Enabler" "Swift Performance - PHP Caching Mode" "Swift Performance - Rewrite Caching Mode" "Other")
    select opt in "${options[@]}"
    do
        case $opt in
            "W3 Total Cache") plugins_cache="w3c"; break;;
            "WP Fastest Cache") plugins_cache="wpfc"; break;;
            "WP Rocket") plugins_cache="wprocket"; break;;
            "WP Super Cache") plugins_cache="wpsc"; break;;
            "Cache Enabler") plugins_cache="enabler"; break;;
            "Swift Performance - PHP Caching Mode") plugins_cache="swift1"; break;;
            "Swift Performance - Rewrite Caching Mode") plugins_cache="swift2"; break;;
            "Other") plugins_cache="other"; break;;
            *) printf "${RED}${WRONG_SELECT}${NC}\n"; break;;
        esac
    done
}

select_plugin_seo(){
    plugins_seo=""
    echo "${SELECT_PLUGINS_SEO}"
    PS3="${INPUT_SELECT}"
    options=("Yoast Seo" "Rank Math Seo")
    select opt in "${options[@]}"
    do
        case $opt in
            "Yoast Seo") plugins_seo="yoast_seo"; break;;
            "Rank Math Seo") plugins_seo="rank_math_seo"; break;;
            *) printf "${RED}${WRONG_SELECT}${NC}\n"; break;;
        esac
    done
}

wp_auto_install_info(){
    read -r -p "${INPUT_WP_ADMIN}" admin_user
    admin_pwd=$(gen_pass "$@")

    while true
    do
        read -r -p "${INPUT_EMAIL}" admin_email
        echo
        if [[ "${admin_email}" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$ ]];
        then
            break
        else
            echo "${WRONG_EMAIL}"
        fi
    done

    read -r -p "${INPUT_SITE_NAME}" site_name

    if [ -z "${admin_user}" ]; then
        admin_user="admin"
    fi

    if [ -z "${site_name}" ]; then
        site_name="The web is built on WordPress"
    fi
}

brute_force_wp(){
    brute="location = /wp-login.php {
        limit_req zone=two burst=1 nodelay;
        include /etc/nginx/fastcgi_params;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        ${fastcgi_pass}
    }"
}

select_remote(){
    echo "${SELECT_REMOTE}"
    remotes=()
    selects=( $(rclone listremotes) )
    for entry in "${selects[@]}"; do
        select=${entry//:}
        remotes+=("${select}")
    done

    PS3="${SELECT_OPTION}}"
    select remote in "${remotes[@]}"
    do
        remote=${remote}
        break
    done

    if [[ -z "${remote}" || ! ${remote} =~ ^[_a-zA-Z][_a-zA-Z0-9]*$ ]]; then
        ALERT=$(printf "${RED}${WRONG_REMOTE}${NC}\n")
    fi
}
#!/bin/bash

debug_(){
    LOG_FILE=/var/log/hostvn/$(date +%F)_create_domain.log
    exec 5> "${LOG_FILE}"
    BASH_XTRACEFD="5"
    PS4='$LINENO: '
    set -x
}

debug_

# shellcheck disable=SC1091
source /var/hostvn/menu/helpers/function
# shellcheck disable=SC1091
source /var/hostvn/hostvn.conf
# shellcheck disable=SC1091
source /var/hostvn/menu/helpers/menu
# shellcheck disable=SC1091
source /var/hostvn/menu/helpers/variable_php
# shellcheck disable=SC1091
source /var/hostvn/menu/helpers/variable_common

echo "-------------------------------------------------------------------------"
echo "Thêm domain mới"
echo "-------------------------------------------------------------------------"
echo ""

check_service(){
    nginx_status="$(systemctl status nginx.service | grep 'Active' | cut -f2 -d':' | xargs | cut -f1 -d' ' | xargs)"
    phpfpm_status="$(systemctl status php-fpm.service | grep 'Active' | cut -f2 -d':' | xargs | cut -f1 -d' ' | xargs)"
    mariadb_status="$(systemctl status mariadb.service | grep 'Active' | cut -f2 -d':' | xargs | cut -f1 -d' ' | xargs)"
    pureftpd_status="$(systemctl status pure-ftpd.service | grep 'Active' | cut -f2 -d':' | xargs | cut -f1 -d' ' | xargs)"

    if [[ "${nginx_status}" != 'active' ]] || [[ "${phpfpm_status}" != 'active' ]] || [[ "${mariadb_status}" != 'active' || "${pureftpd}" != 'pureftpd_status' ]]; then
        clear
        echo "-------------------------------------------------------------------------"
        echo "Có lỗi xảy ra:"
        echo "-------------------------------------------------------------------------"
        echo "Vui lòng kiểm tra lại các service trước khi thêm tên miền:"
        echo "-------------------------------------------------------------------------"
        printf "Nginx: %s\n" "${nginx_status}"
        printf "PHP-FPM: %s\n" "${phpfpm_status}"
        printf "MariaDB: %s\n" "${mariadb_status}"
        printf "Pure-ftp: %s\n" "${pureftpd_status}"
        echo "-------------------------------------------------------------------------"
        echo
        menu_domain
    fi
}

# Set variables
prepare(){
    read -r -p "Nhập domain (Không có www) [ENTER]: " domain
    username=${domain//[-._]/}
    user_pass=$(< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c"${1:-12}";echo;)
    prefix=$(< /dev/urandom tr -dc '[:lower:]' | head -c"${1:-4}";echo;)
    SALT=$(curl -L https://api.wordpress.org/secret-key/1.1/salt/)
    wp_prefix=$(< /dev/urandom tr -dc '[:lower:]' | head -c"${1:-4}";echo;)
    db_user=$(echo "${username}"_"${prefix}" | tr '[:upper:]' '[:lower:]')
    db_name=$(echo "${prefix}"_"${username}" | tr '[:upper:]' '[:lower:]')
    db_pass=$(< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c"${1:-12}";echo;)
    cache="include /etc/nginx/extra/staticfiles.conf;"
    plugin_cache="other"
    php_mode="1"
    wp_secure=""
    brute=""
}

# Check Conditions
check_domain(){
    if [ "$domain" = '' ]; then
        clear
        echo "Bạn chưa nhập Domain."
        echo
        menu_domain
    fi

    if [ "$domain" = "${domain/.}" ]; then
        clear
        echo "Domain bạn nhập không đúng định dạng."
        echo
        menu_domain
    fi

    if [[ -f "/etc/nginx/conf.d/${domain}.conf" || -f "${USER_DIR}/.${domain}.conf" ]]; then
        clear
        echo "Domain đã tồn tại trên VPS."
        echo
        menu_domain
    fi
}

check_user(){
    RESULT_USER=$(grep -c "^${username}:" /etc/passwd)
    if [[ "${RESULT_USER}" != 0 ]]; then
        echo "User đã tồn tại trên VPS."
        echo ""
        menu_domain
    fi
}

check_database(){
    RESULT_DB=$(mysqlshow "${db_name}" | grep -v Wildcard | grep -o "${db_name}")
    if [ "$RESULT_DB" == "${db_name}" ]; then
        echo "Database đã tồn tại trên VPS."
        echo ""
        menu_domain
    fi
}

check_mysql_user(){
    RESULT_VARIABLE="$(mysql -sse "SELECT EXISTS(SELECT 1 FROM mysql.user WHERE user = '$db_user')")"
    if [[ "${RESULT_VARIABLE}" = 1 ]]; then
        echo "Mysql User đã tồn tại trên VPS."
        echo ""
        menu_domain
    fi
}

set_php_version(){
    php1="php${php1_version}"
    php2=${php2_version}
}

select_php(){
    set_php_version

    echo "Lựa chọn phiên bản PHP bạn muốn sử dụng"
    PS3='Nhập lựa chọn của bạn (1-2): '
    options=("${php1}" "${php2}")
    select opt in "${options[@]}"
    do
        case $opt in
            "${php1}") php_mode="1"; break;;
            "${php2}") php_mode="2"; break;;
            *) printf "Bạn nhập sai, hệ thống sẽ sử dụng phiên bản PHP mặc định.\n"; break;;
        esac
    done
}

# Select Source
select_source(){
    SOURCE="Other"
    echo "Lựa chọn mã nguồn để tạo Rewrite Url"
    PS3='Nhập lựa chọn của bạn (1-14): '
    options=("WordPress" "Laravel" "CodeIgniter" "Xenforo" "Joomla" "Drupal" "OpenCart" "WHMCS" "PrestaShop" "Yii" "NextCloud" "Discuz" "Ecshop" "Other")
    select opt in "${options[@]}"
    do
        case $opt in
            "WordPress") SOURCE="wordpress"; break;;
            "Laravel") SOURCE="laravel"; break;;
            "CodeIgniter") SOURCE="codeigniter"; break;;
            "Xenforo") SOURCE="xenforo"; break;;
            "Joomla") SOURCE="joomla"; break;;
            "Drupal") SOURCE="drupal"; break;;
            "OpenCart") SOURCE="opencart"; break;;
            "WHMCS") SOURCE="whmcs"; break;;
            "PrestaShop") SOURCE="prestashop"; break;;
            "Yii") SOURCE="yii"; break;;
            "NextCloud") SOURCE="nextcloud"; break;;
            "Discuz") SOURCE="discuz"; break;;
            "Ecshop") SOURCE="ecshop"; break;;
            "Other") SOURCE="default"; break;;
            *) printf "Bạn nhập sai, hệ thống sẽ tạo Rewrite Url mặc định.\n"; break;;
        esac
    done
}

auto_install_wp(){
    auto_inst_wp="n"
    echo "Bạn có muốn tự động cài đặt WordPress mới không ?"
    PS3='Nhập lựa chọn của bạn (1-2): '
    options=("Yes" "No")
    select opt in "${options[@]}"
    do
        case $opt in
            "Yes") auto_inst_wp="y"; break;;
            "No") auto_inst_wp="n"; break;;
            *) printf "Bạn nhập sai, huỷ tự động cài đặt WordPress.\n"; break;;
        esac
    done

    if [[ "${auto_inst_wp}" == "y" ]]; then
        cd_dir "/home/${username}/${domain}/public_html"
        wget https://wordpress.org/latest.tar.gz
        tar -xvf latest.tar.gz
        cd wordpress && mv ./* ../
        cd_dir "/home/${username}/${domain}/public_html"
        rm -rf wordpress license.txt readme.html latest.tar.gz

        #create wwp-config.php
        cat >> "/home/${username}/${domain}/public_html/wp-config.php" << END
<?php
define( 'DB_NAME', '${db_name}' );
define( 'DB_USER', '${db_user}' );
define( 'DB_PASSWORD', '${db_pass}' );
define( 'DB_HOST', 'localhost' );
define( 'DB_CHARSET', 'utf8' );
define( 'DB_COLLATE', '' );
${SALT}
\$table_prefix = '${wp_prefix}_';
define( 'WP_DEBUG', false );

if ( ! defined( 'ABSPATH' ) ) {
    define( 'ABSPATH', __DIR__ . '/' );
}

require_once ABSPATH . 'wp-settings.php';
END
        #create robots
        cat > "/home/$username/$domain/public_html/robots.txt" <<END
User-agent: *
Disallow: /wp-admin/
Disallow: /wp-includes/
Disallow: /search?q=*
Disallow: *?replytocom
Disallow: */attachment/*
Disallow: /images/
Allow: /wp-admin/admin-ajax.php
Allow: /*.js$
Allow: /*.css$
END
        chown -R "${username}":"${username}" ./*
    fi
}

plugin_cache(){
    plugins_cache="n"
    echo "Lựa chọn Plugins cache mà bạn sử dụng ?"
    PS3='Nhập lựa chọn của bạn (1-2): '
    options=("W3 Total Cache" "WP Fastest Cache" "WP Rocket" "WP Super Cache" "Cache Enabler" "Swift Performance - PHP Caching Mode" "Swift Performance - Rewrite Caching Mode" "Other")
    select opt in "${options[@]}"
    do
        case $opt in
            "W3 Total Cache") plugins_cache="w3c"; break;;
            "WP Fastest Cache") plugins_cache="wpfc"; break;;
            "WP Rocket") plugins_cache="wprocket"; break;;
            "WP Super Cache") plugins_cache="wpsc"; break;;
            "Cache Enabler") plugins_cache="enabler"; break;;
            "Swift Performance - PHP Caching Mode") plugins_cache="swift1"; break;;
            "Swift Performance - Rewrite Caching Mode") plugins_cache="swift2"; break;;
            "Other") plugins_cache="other"; break;;
            *) printf "Bạn nhập sai, huỷ tự động config cấu hình cho plugins cache.\n"; break;;
        esac
    done
}

browser_cache(){
    if [[ "${plugins_cache}" == "w3c" ]]; then
        plugin_cache="w3c"
        cache="include /etc/nginx/wordpress/w3c.conf;"
        wp_secure="include /etc/nginx/wordpress/wordpress_secure.conf;"
    elif [[ "${plugins_cache}" == "wpfc" ]]; then
        plugin_cache="wpfc"
        cache="include /etc/nginx/wordpress/wpfc.conf;"
        wp_secure="include /etc/nginx/wordpress/wordpress_secure.conf;"
        rewrite=""
    elif [[ "${plugins_cache}" == "wprocket" ]]; then
        plugin_cache="wprocket"
        cache="include /etc/nginx/wordpress/wprocket.conf;"
        wp_secure="include /etc/nginx/wordpress/wordpress_secure.conf;"
        rewrite=""
    elif [[ "${plugins_cache}" == "wpsc" ]]; then
        plugin_cache="wpsc"
        cache="include /etc/nginx/wordpress/wpsc.conf;"
        wp_secure="include /etc/nginx/wordpress/wordpress_secure.conf;"
        rewrite=""
    elif [[ "${plugins_cache}" == "enabler" ]]; then
        plugin_cache="enabler"
        cache="include /etc/nginx/wordpress/enabler.conf;"
        wp_secure="include /etc/nginx/wordpress/wordpress_secure.conf;"
        rewrite=""
    elif [[ "${plugins_cache}" == "swift1" ]]; then
        plugin_cache="swift1"
        cache="include /etc/nginx/extra/staticfiles.conf;"
        wp_secure="include /etc/nginx/wordpress/wordpress_secure.conf;"
        rewrite="include /etc/nginx/rewrite/${SOURCE}.conf;"
    elif [[ "${plugins_cache}" == "swift2" ]]; then
        plugin_cache="swift2"
        cache="include /etc/nginx/wordpress/swift2.conf;"
        wp_secure="include /etc/nginx/wordpress/wordpress_secure.conf;"
        rewrite="include /etc/nginx/rewrite/${SOURCE}.conf;"
    else
        plugin_cache="other"
        wp_secure="include /etc/nginx/wordpress/wordpress_secure.conf;"
        rewrite="include /etc/nginx/rewrite/${SOURCE}.conf;"
    fi
}

# Create
create_user(){
    check_user
    useradd --shell /sbin/nologin "${username}"
}

create_ftp(){
    pure-pw useradd "${username}" -u "${username}" -g "${username}" -d /home/"${username}" << EOF
${user_pass}
${user_pass}
EOF
    pure-pw mkdb
}

create_db(){
    check_database
    check_mysql_user

    MYSQL=$(which mysql)
    Q1="CREATE DATABASE IF NOT EXISTS ${db_name};"
    Q2="GRANT ALL ON ${db_name}.* TO '${db_user}'@'localhost' IDENTIFIED BY '${db_pass}';"
    Q3="FLUSH PRIVILEGES;"
    SQL="${Q1}${Q2}${Q3}"

    ${MYSQL} -uroot -e "${SQL}"
}

create_docrot(){
    mkdir -p /home/"${username}"/"${domain}"/public_html
    mkdir -p /home/"${username}"/"${domain}"/logs
    chmod 711 /home/"${username}"
    chmod 711 /home/"${username}"/"${domain}"
    chmod 711 /home/"${username}"/"${domain}"/logs
    chmod 755 /home/"${username}"/"${domain}"/public_html
    chown -R "${username}":"${username}" /home/"${username}"
}

disable_functions(){
    dis_functions="exec,system,passthru,shell_exec,proc_close,proc_open,popen,dl,show_source,posix_kill,posix_mkfifo,posix_getpwuid,posix_setpgid,posix_setsid,posix_setuid,posix_setgid,posix_seteuid,posix_setegid,posix_uname"
    if [[ "${SOURCE}" == "laravel" || "${SOURCE}" == "yii" || "${SOURCE}" == "codeigniter" ]]; then
        dis_functions="exec,system,passthru,shell_exec,dl,show_source,posix_kill,posix_mkfifo,posix_getpwuid,posix_setpgid,posix_setsid,posix_setuid,posix_setgid,posix_seteuid,posix_setegid,posix_uname"
    fi
}

set_phpconf_var(){
    php_conf_file="/etc/php-fpm.d/${domain}.conf"
    listen="/var/run/php-fpm/${username}.sock;"
    slowlog="/var/log/php-fpm/${domain}-slow.log"
    error_log="/var/log/php-fpm/${domain}-error.log"
    tmp_dir="/home/${username}/tmp"
    session_path="/home/${username}/php/session"
    wsdl_cache_dir="/home/${username}/php/wsdlcache"
    open_basedir="/home/${username}/:/dev/urandom:/usr/share/php/:/dev/shm"

    if [[ "${php2_release}" == "yes" && "${php_mode}" == "2" ]]; then
        php_conf_file="/opt/remi/${php2_version}/root/etc/php-fpm.d/${domain}.conf"
        listen="/opt/remi/${php2_version}/root/var/run/php-fpm/${username}.sock"
        open_basedir="/home/${username}/:/dev/urandom:/opt/remi/${php2_version}/root/usr/share/php/:/dev/shm"
    fi

    mkdir -p "${tmp_dir}"
    mkdir -p "${session_path}"
    mkdir -p "${wsdl_cache_dir}"
    chmod 700 "${session_path}"
    chmod 700 "${wsdl_cache_dir}"
    chown -R "${username}":"${username}" /home/"${username}"
}

create_phpconfig(){
    set_phpconf_var
    php_parameter
    cat > "${php_conf_file}" << END
[${username}]
listen = ${listen}
listen.backlog = -1
listen.allowed_clients = 127.0.0.1
listen.owner = ${username}
listen.group = nginx
listen.mode = 0660
user = ${username}
group = ${username}
pm = dynamic
pm.max_children = ${PM_MAX_CHILDREN}
pm.start_servers = ${PM_START_SERVERS}
pm.min_spare_servers =  ${PM_MIN_SPARE_SERVER}
pm.max_spare_servers = ${PM_MAX_SPARE_SERVER}
pm.max_requests = ${PM_MAX_REQUEST}
request_terminate_timeout = 300
rlimit_files = 65536
rlimit_core = 0
;slowlog = ${slowlog}
chdir = /
env[TMP] = ${tmp_dir}
env[TMPDIR] = ${tmp_dir}
env[TEMP] = ${tmp_dir}
php_admin_value[error_log] = ${error_log}
php_admin_flag[log_errors] = on
php_value[session.save_handler] = files
php_value[session.save_path]    = ${session_path}
php_value[soap.wsdl_cache_dir]  = ${wsdl_cache_dir}
php_admin_value[disable_functions] = ${dis_functions}
php_admin_value[upload_tmp_dir] = ${tmp_dir}
php_admin_value[open_basedir] = ${open_basedir}
security.limit_extensions = .php
END
}

set_docroot(){
    if [[ "${SOURCE}" == "laravel" ]]; then
        root="root /home/${username}/${domain}/public_html/public;"
    else
        root="root /home/${username}/${domain}/public_html;"
    fi
}

create_vhost(){
    set_rewrite
    fastcgi

    if [[ "${SOURCE}" == "wordpress" ]]; then
        browser_cache
        brute_force_wp
    fi

    set_docroot

    cat >> "${VHOST_DIR}/${domain}.conf" << END
server {
    listen 80;
    server_name ${domain} www.${domain};

    #access_log off;
    #access_log /home/${username}/${domain}/logs/access.log;
    #error_log off;
    error_log /home/${username}/${domain}/logs/error.log;
    ${root}
    index index.php index.html index.htm;

    ${rewrite}
    ${cache}

    location ~ \.php\$ {
        try_files \$uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)\$;
        fastcgi_index index.php;
        include /etc/nginx/fastcgi_params;
        include /etc/nginx/extra/nginx_limits.conf;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        if (-f \$request_filename)
        {
            ${fastcgi_pass}
        }
    }

    ${brute}
    ${wp_secure}
    include /etc/nginx/extra/security.conf;
}
END
}

save_user_config(){
    php_ver=${php1_version}
    php_mode="1"
    if [[ "${php_mode}" == "2" ]]; then
        php_ver="${php2_version}"
        php_mode="2"
    fi

    cat > "${USER_DIR}/.${domain}.conf" <<END
[${domain}]
username=${username}
user_pass=${user_pass}
domain=${domain}
db_name=${db_name}
db_user=${db_user}
db_password=${db_pass}
public_html=/home/${username}/${domain}/public_html
plugin_cache=${plugin_cache}
php_mode=${php_mode}
php_version=${php_ver}
END
    chmod 600 "${USER_DIR}"/."${domain}".conf
}

restart_service(){
    systemctl restart nginx.service
    systemctl restart php-fpm.service
}

run(){
    check_service
    prepare "$@"
    check_domain
    select_source

    if [[ "${php2_release}" == "yes" ]]; then
        select_php
    fi

    create_user
    create_ftp
    create_db
    create_docrot
    create_phpconfig

    if [[ "${SOURCE}" == "wordpress" ]]; then
        auto_install_wp "$@"
        plugin_cache
    fi

    create_vhost
    save_user_config
    restart_service
}

run "$@"

clear
echo ""
echo "Bạn đã thêm domain thành công. Hãy lưu lại thông tin để sử dụng"
echo "-------------------------------------------------------------------------"
printf "1.  Domain                : %s\n" "${domain}"
printf "2.  DB_Name               : %s\n" "${db_name}"
printf "3.  DB_User               : %s\n" "${db_user}"
printf "4.  DB_Password           : %s\n" "${db_pass}"
printf "5.  Username (FTP)        : %s\n" "${username}"
printf "6.  Password (FTP)        : %s\n" "$user_pass"
printf "7.  FTP Host              : %s\n" "${IPADDRESS}"
echo "8.  FTP Port              : 21"
printf "9.  Public_html           : %s\n" "/home/${username}/${domain}/public_html"
echo "-------------------------------------------------------------------------"
echo ""
menu_domain
#!/bin/bash

#################################################
# Auto Install & Optimize LEMP Stack on CentOS 7#
# Version: 1.0                                  #
# Author: Sanvv - HOSTVN Technical              #
#                                               #
# Please don't remove copyright. Thank!         #
#################################################

# shellcheck disable=SC1091
source /var/hostvn/menu/helpers/function

printf "${GREEN}------------------------${NC}\n"
printf "${GREEN}Them SSL - Let's Encrypt${NC}\n"
printf "${GREEN}------------------------${NC}\n"
echo

set_variable(){
    username=$(grep "username" "${USER_DIR}/.${domain:?}.conf" | cut -f2 -d'=')
    plugin_cache="$(grep "plugin_cache" "${USER_DIR}/.${domain}.conf" | cut -f2 -d'=')"
    rewrite="include /etc/nginx/rewrite/${SOURCE}.conf;"
    cache="include /etc/nginx/extra/staticfiles.conf;"
    wp_secure=""
    brute=""
}

validate(){
    check_nginx_status
    check_a_record "${domain}"
}

check_plugins_cache(){
    if [[ -d "/home/${username}/${domain}/public_html/wp-content/plugins/w3-total-cache" ]]; then
        cache="include /etc/nginx/wordpress/w3c.conf;"
        wp_secure="include /etc/nginx/wordpress/wordpress_secure.conf;"
    elif [[ -d "/home/${username}/${domain}/public_html/wp-content/plugins/wp-fastest-cache" ]]; then
        rewrite=""
        cache="include /etc/nginx/wordpress/wpfc.conf;"
        wp_secure="include /etc/nginx/wordpress/wordpress_secure.conf;"
    elif [[ -d "/home/${username}/${domain}/public_html/wp-content/plugins/wp-rocket" ]]; then
        rewrite=""
        cache="include /etc/nginx/wordpress/wprocket.conf;"
        wp_secure="include /etc/nginx/wordpress/wordpress_secure.conf;"
    elif [[ -d "/home/${username}/${domain}/public_html/wp-content/plugins/wp-super-cache" ]]; then
        rewrite=""
        cache="include /etc/nginx/wordpress/wpsc.conf;"
        wp_secure="include /etc/nginx/wordpress/wordpress_secure.conf;"
    elif [[ -d "/home/${username}/${domain}/public_html/wp-content/plugins/cache-enabler" ]]; then
        rewrite=""
        cache="include /etc/nginx/wordpress/enabler.conf;"
        wp_secure="include /etc/nginx/wordpress/wordpress_secure.conf;"
    elif [[ -d "/home/${username}/${domain}/public_html/wp-content/plugins/swift-performance-lite" && "${plugin_cache}" == "swift1" ]]; then
        cache="include /etc/nginx/extra/staticfiles.conf;"
        wp_secure="include /etc/nginx/wordpress/wordpress_secure.conf;"
    elif [[ -d "/home/${username}/${domain}/public_html/wp-content/plugins/swift-performance-lite" && "${plugin_cache}" == "swift2" ]]; then
        cache="include /etc/nginx/wordpress/swift2.conf;"
        wp_secure="include /etc/nginx/wordpress/wordpress_secure.conf;"
    else
        cache="include /etc/nginx/extra/staticfiles.conf;"
        wp_secure="include /etc/nginx/wordpress/wordpress_secure.conf;"
    fi
}

backup_vhost(){
    if [[ -f "/etc/nginx/backup_vhost/${domain}.conf.orig" ]]; then
        rm -rf /etc/nginx/backup_vhost/"${domain}".conf.orig
    fi

    cp "/etc/nginx/conf.d/$domain.conf" "/etc/nginx/backup_vhost/${domain}.conf.orig"
    # mv "/etc/nginx/conf.d/$domain.conf" "/etc/nginx/backup_vhost/${domain}.conf.orig"
}

sign_ssl(){

    if check_www_record "${domain}";
    then
        /usr/local/bin/certbot-auto --nginx --no-bootstrap -d "${domain}" -d www."${domain}"
    else
        /usr/local/bin/certbot-auto --nginx --no-bootstrap -d "${domain}"
    fi
}

auto_renew(){
    crontab -l | grep -q 'certbot-auto renew' && echo 'Cronjob Exits' || cat <(crontab -l) <(echo "0 3 * * * /usr/local/bin/certbot-auto renew >/dev/null 2>&1") | crontab -
}

create_ssl_vhost(){
    backup_vhost
    #set_rewrite
    fastcgi

    if [[ "${SOURCE}" == "wordpress" ]]; then
        check_plugins_cache
        brute_force_wp
    fi

    cat >> "${VHOST_DIR}/${domain}.conf" << END
server {
    listen 80;
    #listen [::]:80;
    server_name ${domain} www.${domain};

    root /home/${username}/${domain}/public_html/;
    if (\$http_x_forwarded_proto != 'https') {
        return 301 https://\$host\$request_uri;
    }
}

server {
    listen 443 ssl http2;
    server_name ${domain} www.${domain};

    access_log off;
    #access_log /home/${username}/${domain}/logs/access.log;
    log_not_found off;
    #error_log off;
    error_log /home/${username}/${domain}/logs/error.log;

    root /home/${username}/${domain}/public_html/;
    index index.php index.html index.htm;

    ${rewrite}
    ${cache}

    ssl_certificate         /etc/letsencrypt/live/${domain}/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/${domain}/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/${domain}/chain.pem;

    location ~ \.php\$
    {
        try_files \$uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)\$;
        fastcgi_index index.php;
        include /etc/nginx/fastcgi_params;
        include /etc/nginx/extra/nginx_limits.conf;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        if (-f \$request_filename)
        {
            ${fastcgi_pass:?}
        }
    }

    ${brute}
    ${wp_secure}
    include /etc/nginx/extra/security.conf;
}
END
}

restart_nginx(){
    systemctl restart nginx.service
}

run(){
    select_domain
    validate

    # if [ -d "/etc/letsencrypt/live/${domain}" ]; then
    #     ALERT=$(
    #         printf "${RED}Ten mien nay da duoc cai Let's Encrypt.${NC}\n"
    #         printf "${RED}Ban can go bo Let's Encrypt neu muon cai lai.${NC}\n"
    #     )
    # fi

    if [ -z "${ALERT}" ]; then
        #select_source

        #if [[ "${SOURCE}" == "wordpress" ]]; then
            #select_plugin_cache
        #fi

        set_variable
        sign_ssl
        sleep 3
        #auto_renew
        # create_ssl_vhost
        restart_nginx
        clear
        sleep 2
    else
        clear
        printf "${ALERT}\n"
    fi
}

run
menu_letencrypt